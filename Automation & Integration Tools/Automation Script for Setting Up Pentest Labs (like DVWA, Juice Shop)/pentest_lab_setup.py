#!/usr/bin/env python3
"""
Automation Script for Setting Up Pentest Labs

This script automates the setup of penetration testing laboratory environments
for educational and ethical security research purposes.

Features:
- Creates isolated virtual network configurations
- Sets up vulnerable applications for testing
- Configures monitoring and logging
- Generates documentation and network diagrams

Usage:
    python pentest_lab_setup.py --lab-type web --name "WebApp-Lab" --output ./lab_configs
    python pentest_lab_setup.py --lab-type network --name "Network-Lab" --verbose
    python pentest_lab_setup.py --list-templates
    
Author: Security Research Team
License: MIT
Version: 1.0.0

WARNING: This script is intended for educational and authorized testing purposes only.
Only use in environments you own or have explicit permission to test.
"""

import argparse
import json
import logging
import os
import shutil
import subprocess
import sys
import tempfile
import yaml
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple


class PentestLabSetup:
    """Main class for setting up penetration testing laboratories."""
    
    def __init__(self, verbose: bool = False):
        """
        Initialize the PentestLabSetup class.
        
        Args:
            verbose (bool): Enable verbose logging
        """
        self.verbose = verbose
        self.setup_logging()
        self.lab_templates = self._load_lab_templates()
        self.output_dir = Path.cwd() / "pentest_labs"
        
    def setup_logging(self) -> None:
        """Configure logging based on verbosity level."""
        log_level = logging.DEBUG if self.verbose else logging.INFO
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout),
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def _load_lab_templates(self) -> Dict:
        """Load predefined lab templates and configurations."""
        return {
            "web": {
                "name": "Web Application Security Lab",
                "description": "Lab focused on web application vulnerabilities",
                "components": [
                    "DVWA (Damn Vulnerable Web Application)",
                    "WebGoat",
                    "Mutillidae II",
                    "Apache/Nginx Web Server",
                    "MySQL/PostgreSQL Database"
                ],
                "ports": [80, 443, 3306, 5432],
                "network": "192.168.100.0/24"
            },
            "network": {
                "name": "Network Security Lab",
                "description": "Lab focused on network security and penetration testing",
                "components": [
                    "Metasploitable 2/3",
                    "VulnHub VMs",
                    "Windows Server (trial)",
                    "Linux servers with services",
                    "Network monitoring tools"
                ],
                "ports": [21, 22, 23, 53, 80, 135, 139, 445],
                "network": "192.168.200.0/24"
            },
            "wireless": {
                "name": "Wireless Security Lab",
                "description": "Lab focused on wireless network security",
                "components": [
                    "Hostapd (Software AP)",
                    "Aircrack-ng suite",
                    "Wireless clients simulation",
                    "WPA/WPA2 test networks"
                ],
                "ports": [],
                "network": "192.168.300.0/24"
            },
            "mobile": {
                "name": "Mobile Security Lab",
                "description": "Lab focused on mobile application security",
                "components": [
                    "Android emulators",
                    "DIVA (Damn Insecure Vulnerable App)",
                    "Frida server",
                    "Mobile security tools"
                ],
                "ports": [5037, 27042],
                "network": "192.168.400.0/24"
            }
        }
    
    def validate_requirements(self) -> bool:
        """
        Validate system requirements and dependencies.
        
        Returns:
            bool: True if all requirements are met
        """
        self.logger.info("Validating system requirements...")
        
        requirements = {
            "docker": "Docker for containerized applications",
            "vagrant": "Vagrant for VM management (optional)",
            "virtualbox": "VirtualBox for virtualization (optional)"
        }
        
        missing = []
        for cmd, description in requirements.items():
            if not shutil.which(cmd):
                if cmd == "docker":
                    missing.append(f"{cmd} - {description} (REQUIRED)")
                else:
                    self.logger.warning(f"Optional dependency not found: {cmd}")
        
        if missing:
            self.logger.error("Missing required dependencies:")
            for item in missing:
                self.logger.error(f"  - {item}")
            return False
            
        self.logger.info("System requirements validation passed")
        return True
    
    def create_lab_directory(self, lab_name: str, output_path: Optional[Path] = None) -> Path:
        """
        Create directory structure for the lab.
        
        Args:
            lab_name (str): Name of the lab
            output_path (Optional[Path]): Custom output directory
            
        Returns:
            Path: Path to the created lab directory
        """
        if output_path:
            base_dir = Path(output_path)
        else:
            base_dir = self.output_dir
            
        lab_dir = base_dir / lab_name
        
        # Create directory structure
        directories = [
            lab_dir,
            lab_dir / "configs",
            lab_dir / "docker",
            lab_dir / "scripts",
            lab_dir / "documentation",
            lab_dir / "logs"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            
        self.logger.info(f"Created lab directory structure at: {lab_dir}")
        return lab_dir
    
    def generate_docker_compose(self, lab_type: str, lab_dir: Path) -> None:
        """
        Generate Docker Compose configuration for the lab.
        
        Args:
            lab_type (str): Type of lab to create
            lab_dir (Path): Lab directory path
        """
        template = self.lab_templates.get(lab_type)
        if not template:
            raise ValueError(f"Unknown lab type: {lab_type}")
            
        compose_config = {
            "version": "3.8",
            "services": {},
            "networks": {
                "lab_network": {
                    "driver": "bridge",
                    "ipam": {
                        "config": [{"subnet": template["network"]}]
                    }
                }
            }
        }
        
        # Generate services based on lab type
        if lab_type == "web":
            compose_config["services"] = {
                "dvwa": {
                    "image": "vulnerables/web-dvwa",
                    "ports": ["8080:80"],
                    "environment": ["MYSQL_HOSTNAME=db"],
                    "networks": ["lab_network"],
                    "depends_on": ["db"]
                },
                "webgoat": {
                    "image": "webgoat/goatandwolf",
                    "ports": ["8081:8080"],
                    "networks": ["lab_network"]
                },
                "db": {
                    "image": "mysql:5.7",
                    "environment": [
                        "MYSQL_ROOT_PASSWORD=password",
                        "MYSQL_DATABASE=dvwa"
                    ],
                    "networks": ["lab_network"]
                }
            }
        elif lab_type == "network":
            compose_config["services"] = {
                "metasploitable": {
                    "image": "tleemcjr/metasploitable2",
                    "ports": ["2222:22", "2121:21", "8082:80"],
                    "networks": ["lab_network"]
                },
                "vulnerable_ssh": {
                    "image": "linuxserver/openssh-server",
                    "ports": ["2223:2222"],
                    "environment": [
                        "PUID=1000",
                        "PGID=1000",
                        "PASSWORD_ACCESS=true",
                        "USER_PASSWORD=vulnerable",
                        "USER_NAME=testuser"
                    ],
                    "networks": ["lab_network"]
                }
            }
        
        # Write docker-compose.yml
        compose_file = lab_dir / "docker-compose.yml"
        with open(compose_file, 'w') as f:
            yaml.dump(compose_config, f, default_flow_style=False, indent=2)
            
        self.logger.info(f"Generated Docker Compose configuration: {compose_file}")
    
    def generate_lab_scripts(self, lab_type: str, lab_dir: Path) -> None:
        """
        Generate helper scripts for lab management.
        
        Args:
            lab_type (str): Type of lab
            lab_dir (Path): Lab directory path
        """
        scripts_dir = lab_dir / "scripts"
        
        # Start script
        start_script = scripts_dir / "start_lab.sh"
        with open(start_script, 'w') as f:
            f.write(f"""#!/bin/bash
# Start {lab_type} Pentest Lab
echo "Starting {lab_type} pentest lab..."
docker-compose up -d
echo "Lab is starting up. Please wait a moment for all services to initialize."
echo "Check status with: docker-compose ps"
""")
        start_script.chmod(0o755)
        
        # Stop script
        stop_script = scripts_dir / "stop_lab.sh"
        with open(stop_script, 'w') as f:
            f.write(f"""#!/bin/bash
# Stop {lab_type} Pentest Lab
echo "Stopping {lab_type} pentest lab..."
docker-compose down
echo "Lab stopped."
""")
        stop_script.chmod(0o755)
        
        # Status script
        status_script = scripts_dir / "status.sh"
        with open(status_script, 'w') as f:
            f.write("""#!/bin/bash
# Check lab status
echo "Lab Status:"
docker-compose ps
echo ""
echo "Network Information:"
docker network ls | grep lab
""")
        status_script.chmod(0o755)
        
        self.logger.info(f"Generated lab management scripts in: {scripts_dir}")
    
    def generate_documentation(self, lab_type: str, lab_name: str, lab_dir: Path) -> None:
        """
        Generate lab documentation.
        
        Args:
            lab_type (str): Type of lab
            lab_name (str): Name of the lab
            lab_dir (Path): Lab directory path
        """
        template = self.lab_templates[lab_type]
        docs_dir = lab_dir / "documentation"
        
        # Lab overview
        overview_file = docs_dir / "lab_overview.md"
        with open(overview_file, 'w') as f:
            f.write(f"""# {lab_name} - {template['name']}

## Description
{template['description']}

## Components
""")
            for component in template['components']:
                f.write(f"- {component}\n")
            
            f.write(f"""
## Network Configuration
- Network Range: {template['network']}
- Exposed Ports: {', '.join(map(str, template['ports']))}

## Getting Started
1. Start the lab: `./scripts/start_lab.sh`
2. Check status: `./scripts/status.sh`
3. Stop the lab: `./scripts/stop_lab.sh`

## Security Notes
- This lab contains intentionally vulnerable applications
- Only use in isolated environments
- Do not expose to public networks
- Always shut down when not in use

Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
""")
        
        # Access instructions
        access_file = docs_dir / "access_instructions.md"
        with open(access_file, 'w') as f:
            f.write(f"# Access Instructions for {lab_name}\n\n")
            
            if lab_type == "web":
                f.write("""## Web Applications
- DVWA: http://localhost:8080 (admin/password)
- WebGoat: http://localhost:8081

## Database Access
- MySQL running internally (accessible from DVWA container)
""")
            elif lab_type == "network":
                f.write("""## Network Services
- SSH (Vulnerable): localhost:2223 (testuser/vulnerable)
- Metasploitable Services: localhost:8082 (web), localhost:2222 (ssh)

## Testing Notes
- Use tools like nmap, nikto, and metasploit for testing
- Default credentials are intentionally weak
""")
        
        self.logger.info(f"Generated lab documentation in: {docs_dir}")
    
    def create_lab(self, lab_type: str, lab_name: str, output_path: Optional[str] = None) -> bool:
        """
        Create a complete penetration testing lab.
        
        Args:
            lab_type (str): Type of lab to create
            lab_name (str): Name for the lab
            output_path (Optional[str]): Custom output directory
            
        Returns:
            bool: True if lab creation was successful
        """
        try:
            # Validate lab type
            if lab_type not in self.lab_templates:
                self.logger.error(f"Unknown lab type: {lab_type}")
                self.logger.info(f"Available types: {list(self.lab_templates.keys())}")
                return False
            
            # Validate system requirements
            if not self.validate_requirements():
                return False
            
            # Create lab directory
            output_dir = Path(output_path) if output_path else None
            lab_dir = self.create_lab_directory(lab_name, output_dir)
            
            # Generate configurations
            self.generate_docker_compose(lab_type, lab_dir)
            self.generate_lab_scripts(lab_type, lab_dir)
            self.generate_documentation(lab_type, lab_name, lab_dir)
            
            # Create lab metadata
            metadata = {
                "name": lab_name,
                "type": lab_type,
                "created": datetime.now().isoformat(),
                "template": self.lab_templates[lab_type]
            }
            
            metadata_file = lab_dir / "lab_metadata.json"
            with open(metadata_file, 'w') as f:
                json.dump(metadata, f, indent=2)
            
            self.logger.info(f"Successfully created {lab_type} lab: {lab_name}")
            self.logger.info(f"Lab location: {lab_dir}")
            self.logger.info("To start the lab, run: ./scripts/start_lab.sh")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Failed to create lab: {str(e)}")
            return False
    
    def list_templates(self) -> None:
        """List available lab templates."""
        self.logger.info("Available Lab Templates:")
        for lab_type, template in self.lab_templates.items():
            print(f"\n{lab_type.upper()}:")
            print(f"  Name: {template['name']}")
            print(f"  Description: {template['description']}")
            print(f"  Components: {', '.join(template['components'][:3])}...")


def main():
    """Main function to handle command-line arguments and execute lab setup."""
    parser = argparse.ArgumentParser(
        description="Automated Penetration Testing Lab Setup",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s --lab-type web --name "MyWebLab"
  %(prog)s --lab-type network --name "NetworkTest" --output ./custom_labs
  %(prog)s --list-templates
  %(prog)s --lab-type mobile --name "MobileLab" --verbose

WARNING: This tool creates intentionally vulnerable environments.
Only use in isolated networks and for authorized testing purposes.
        """
    )
    
    parser.add_argument(
        "--lab-type",
        choices=["web", "network", "wireless", "mobile"],
        help="Type of penetration testing lab to create"
    )
    
    parser.add_argument(
        "--name",
        help="Name for the lab (will be used as directory name)"
    )
    
    parser.add_argument(
        "--output",
        help="Output directory for lab files (default: ./pentest_labs)"
    )
    
    parser.add_argument(
        "--list-templates",
        action="store_true",
        help="List available lab templates and exit"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Enable verbose output"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="%(prog)s 1.0.0"
    )
    
    args = parser.parse_args()
    
    # Create lab setup instance
    lab_setup = PentestLabSetup(verbose=args.verbose)
    
    # Handle list templates
    if args.list_templates:
        lab_setup.list_templates()
        return 0
    
    # Validate required arguments
    if not args.lab_type or not args.name:
        parser.error("--lab-type and --name are required unless using --list-templates")
    
    # Validate lab name
    if not args.name.replace("-", "").replace("_", "").isalnum():
        parser.error("Lab name must contain only alphanumeric characters, hyphens, and underscores")
    
    # Create the lab
    success = lab_setup.create_lab(args.lab_type, args.name, args.output)
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
                    