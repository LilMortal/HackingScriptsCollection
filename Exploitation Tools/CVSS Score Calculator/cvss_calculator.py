#!/usr/bin/env python3
"""
CVSS Score Calculator

A Python script to calculate Common Vulnerability Scoring System (CVSS) v3.1 scores
based on vulnerability metrics. CVSS provides a standardized way to assess the
severity of security vulnerabilities.

Usage:
    python cvss_calculator.py --av N --ac L --pr N --ui N --s U --c H --i H --a H
    python cvss_calculator.py --interactive
    python cvss_calculator.py --help

Author: AI Assistant
License: MIT
Version: 1.0.0
"""

import argparse
import sys
import math
from typing import Dict, Tuple, Optional


class CVSSCalculator:
    """
    CVSS v3.1 Score Calculator
    
    This class implements the Common Vulnerability Scoring System v3.1 specification
    for calculating base scores based on vulnerability characteristics.
    """
    
    # CVSS v3.1 Metric Values and Scores
    METRIC_VALUES = {
        'attack_vector': {
            'N': ('Network', 0.85),
            'A': ('Adjacent Network', 0.62),
            'L': ('Local', 0.55),
            'P': ('Physical', 0.2)
        },
        'attack_complexity': {
            'L': ('Low', 0.77),
            'H': ('High', 0.44)
        },
        'privileges_required': {
            'N': ('None', 0.85),
            'L': ('Low', 0.62),
            'H': ('High', 0.27)
        },
        'privileges_required_changed': {
            'N': ('None', 0.85),
            'L': ('Low', 0.68),
            'H': ('High', 0.5)
        },
        'user_interaction': {
            'N': ('None', 0.85),
            'R': ('Required', 0.62)
        },
        'scope': {
            'U': ('Unchanged', 1.0),
            'C': ('Changed', 1.0)
        },
        'confidentiality': {
            'N': ('None', 0.0),
            'L': ('Low', 0.22),
            'H': ('High', 0.56)
        },
        'integrity': {
            'N': ('None', 0.0),
            'L': ('Low', 0.22),
            'H': ('High', 0.56)
        },
        'availability': {
            'N': ('None', 0.0),
            'L': ('Low', 0.22),
            'H': ('High', 0.56)
        }
    }
    
    def __init__(self):
        """Initialize the CVSS Calculator."""
        self.metrics = {}
    
    def validate_metric(self, metric_name: str, value: str) -> bool:
        """
        Validate if a metric value is valid for the given metric.
        
        Args:
            metric_name (str): Name of the metric
            value (str): Value to validate
            
        Returns:
            bool: True if valid, False otherwise
        """
        if metric_name == 'privileges_required':
            # Special case for privileges_required as it depends on scope
            return value in ['N', 'L', 'H']
        
        return metric_name in self.METRIC_VALUES and value in self.METRIC_VALUES[metric_name]
    
    def get_metric_score(self, metric_name: str, value: str, scope_changed: bool = False) -> float:
        """
        Get the numeric score for a metric value.
        
        Args:
            metric_name (str): Name of the metric
            value (str): Metric value
            scope_changed (bool): Whether scope is changed (affects PR scoring)
            
        Returns:
            float: Numeric score for the metric
        """
        if metric_name == 'privileges_required' and scope_changed:
            return self.METRIC_VALUES['privileges_required_changed'][value][1]
        
        return self.METRIC_VALUES[metric_name][value][1]
    
    def calculate_exploitability_score(self, av: float, ac: float, pr: float, ui: float) -> float:
        """
        Calculate the Exploitability Score.
        
        Args:
            av (float): Attack Vector score
            ac (float): Attack Complexity score
            pr (float): Privileges Required score
            ui (float): User Interaction score
            
        Returns:
            float: Exploitability score
        """
        return 8.22 * av * ac * pr * ui
    
    def calculate_impact_score(self, c: float, i: float, a: float, scope_changed: bool) -> float:
        """
        Calculate the Impact Score.
        
        Args:
            c (float): Confidentiality impact score
            i (float): Integrity impact score
            a (float): Availability impact score
            scope_changed (bool): Whether scope is changed
            
        Returns:
            float: Impact score
        """
        iss_base = 1 - ((1 - c) * (1 - i) * (1 - a))
        
        if scope_changed:
            return 7.52 * (iss_base - 0.029) - 3.25 * pow(iss_base - 0.02, 15)
        else:
            return 6.42 * iss_base
    
    def calculate_base_score(self, exploitability: float, impact: float, scope_changed: bool) -> float:
        """
        Calculate the CVSS Base Score.
        
        Args:
            exploitability (float): Exploitability score
            impact (float): Impact score
            scope_changed (bool): Whether scope is changed
            
        Returns:
            float: CVSS Base Score (0.0 - 10.0)
        """
        if impact <= 0:
            return 0.0
        
        if scope_changed:
            base_score = min(1.08 * (impact + exploitability), 10.0)
        else:
            base_score = min(impact + exploitability, 10.0)
        
        # Round up to nearest 0.1
        return math.ceil(base_score * 10) / 10
    
    def get_severity_rating(self, score: float) -> str:
        """
        Get the qualitative severity rating for a CVSS score.
        
        Args:
            score (float): CVSS base score
            
        Returns:
            str: Severity rating (None, Low, Medium, High, Critical)
        """
        if score == 0.0:
            return "None"
        elif 0.1 <= score <= 3.9:
            return "Low"
        elif 4.0 <= score <= 6.9:
            return "Medium"
        elif 7.0 <= score <= 8.9:
            return "High"
        elif 9.0 <= score <= 10.0:
            return "Critical"
        else:
            return "Invalid"
    
    def calculate_cvss(self, av: str, ac: str, pr: str, ui: str, s: str, 
                      c: str, i: str, a: str) -> Dict:
        """
        Calculate CVSS v3.1 Base Score and related metrics.
        
        Args:
            av (str): Attack Vector (N/A/L/P)
            ac (str): Attack Complexity (L/H)
            pr (str): Privileges Required (N/L/H)
            ui (str): User Interaction (N/R)
            s (str): Scope (U/C)
            c (str): Confidentiality Impact (N/L/H)
            i (str): Integrity Impact (N/L/H)
            a (str): Availability Impact (N/L/H)
            
        Returns:
            Dict: Dictionary containing scores and metrics
        """
        # Validate all inputs
        metrics_to_validate = [
            ('attack_vector', av),
            ('attack_complexity', ac),
            ('privileges_required', pr),
            ('user_interaction', ui),
            ('scope', s),
            ('confidentiality', c),
            ('integrity', i),
            ('availability', a)
        ]
        
        for metric_name, value in metrics_to_validate:
            if not self.validate_metric(metric_name, value):
                raise ValueError(f"Invalid value '{value}' for metric '{metric_name}'")
        
        # Determine if scope is changed
        scope_changed = s == 'C'
        
        # Get metric scores
        av_score = self.get_metric_score('attack_vector', av)
        ac_score = self.get_metric_score('attack_complexity', ac)
        pr_score = self.get_metric_score('privileges_required', pr, scope_changed)
        ui_score = self.get_metric_score('user_interaction', ui)
        c_score = self.get_metric_score('confidentiality', c)
        i_score = self.get_metric_score('integrity', i)
        a_score = self.get_metric_score('availability', a)
        
        # Calculate component scores
        exploitability = self.calculate_exploitability_score(av_score, ac_score, pr_score, ui_score)
        impact = self.calculate_impact_score(c_score, i_score, a_score, scope_changed)
        base_score = self.calculate_base_score(exploitability, impact, scope_changed)
        
        # Get severity rating
        severity = self.get_severity_rating(base_score)
        
        # Build CVSS vector string
        vector_string = f"CVSS:3.1/AV:{av}/AC:{ac}/PR:{pr}/UI:{ui}/S:{s}/C:{c}/I:{i}/A:{a}"
        
        return {
            'base_score': base_score,
            'exploitability_score': round(exploitability, 1),
            'impact_score': round(impact, 1),
            'severity_rating': severity,
            'vector_string': vector_string,
            'metrics': {
                'attack_vector': (av, self.METRIC_VALUES['attack_vector'][av][0]),
                'attack_complexity': (ac, self.METRIC_VALUES['attack_complexity'][ac][0]),
                'privileges_required': (pr, self.METRIC_VALUES['privileges_required'][pr][0]),
                'user_interaction': (ui, self.METRIC_VALUES['user_interaction'][ui][0]),
                'scope': (s, self.METRIC_VALUES['scope'][s][0]),
                'confidentiality': (c, self.METRIC_VALUES['confidentiality'][c][0]),
                'integrity': (i, self.METRIC_VALUES['integrity'][i][0]),
                'availability': (a, self.METRIC_VALUES['availability'][a][0])
            }
        }


def interactive_mode():
    """
    Run the calculator in interactive mode, prompting user for each metric.
    """
    calculator = CVSSCalculator()
    
    print("=== CVSS v3.1 Base Score Calculator (Interactive Mode) ===\n")
    
    # Collect metrics interactively
    metrics = {}
    
    # Attack Vector
    print("Attack Vector (AV):")
    print("  N - Network (remotely exploitable)")
    print("  A - Adjacent Network (adjacent network access required)")
    print("  L - Local (local access required)")
    print("  P - Physical (physical access required)")
    while True:
        av = input("Enter Attack Vector [N/A/L/P]: ").upper()
        if calculator.validate_metric('attack_vector', av):
            metrics['av'] = av
            break
        print("Invalid input. Please enter N, A, L, or P.")
    
    # Attack Complexity
    print("\nAttack Complexity (AC):")
    print("  L - Low (no specialized conditions)")
    print("  H - High (specialized access conditions)")
    while True:
        ac = input("Enter Attack Complexity [L/H]: ").upper()
        if calculator.validate_metric('attack_complexity', ac):
            metrics['ac'] = ac
            break
        print("Invalid input. Please enter L or H.")
    
    # Privileges Required
    print("\nPrivileges Required (PR):")
    print("  N - None")
    print("  L - Low")
    print("  H - High")
    while True:
        pr = input("Enter Privileges Required [N/L/H]: ").upper()
        if calculator.validate_metric('privileges_required', pr):
            metrics['pr'] = pr
            break
        print("Invalid input. Please enter N, L, or H.")
    
    # User Interaction
    print("\nUser Interaction (UI):")
    print("  N - None (no user interaction required)")
    print("  R - Required (user interaction required)")
    while True:
        ui = input("Enter User Interaction [N/R]: ").upper()
        if calculator.validate_metric('user_interaction', ui):
            metrics['ui'] = ui
            break
        print("Invalid input. Please enter N or R.")
    
    # Scope
    print("\nScope (S):")
    print("  U - Unchanged (vulnerability affects same security authority)")
    print("  C - Changed (vulnerability affects different security authority)")
    while True:
        s = input("Enter Scope [U/C]: ").upper()
        if calculator.validate_metric('scope', s):
            metrics['s'] = s
            break
        print("Invalid input. Please enter U or C.")
    
    # Impact metrics
    impact_description = {
        'N': 'None (no impact)',
        'L': 'Low (limited impact)',
        'H': 'High (total impact)'
    }
    
    # Confidentiality
    print("\nConfidentiality Impact (C):")
    for key, desc in impact_description.items():
        print(f"  {key} - {desc}")
    while True:
        c = input("Enter Confidentiality Impact [N/L/H]: ").upper()
        if calculator.validate_metric('confidentiality', c):
            metrics['c'] = c
            break
        print("Invalid input. Please enter N, L, or H.")
    
    # Integrity
    print("\nIntegrity Impact (I):")
    for key, desc in impact_description.items():
        print(f"  {key} - {desc}")
    while True:
        i = input("Enter Integrity Impact [N/L/H]: ").upper()
        if calculator.validate_metric('integrity', i):
            metrics['i'] = i
            break
        print("Invalid input. Please enter N, L, or H.")
    
    # Availability
    print("\nAvailability Impact (A):")
    for key, desc in impact_description.items():
        print(f"  {key} - {desc}")
    while True:
        a = input("Enter Availability Impact [N/L/H]: ").upper()
        if calculator.validate_metric('availability', a):
            metrics['a'] = a
            break
        print("Invalid input. Please enter N, L, or H.")
    
    # Calculate and display results
    try:
        result = calculator.calculate_cvss(**metrics)
        display_results(result)
    except Exception as e:
        print(f"Error calculating CVSS score: {e}")
        sys.exit(1)


def display_results(result: Dict):
    """
    Display the calculated CVSS results in a formatted manner.
    
    Args:
        result (Dict): Results dictionary from calculate_cvss()
    """
    print("\n" + "="*60)
    print("CVSS v3.1 BASE SCORE RESULTS")
    print("="*60)
    
    print(f"Base Score: {result['base_score']}")
    print(f"Severity Rating: {result['severity_rating']}")
    print(f"Vector String: {result['vector_string']}")
    
    print(f"\nComponent Scores:")
    print(f"  Exploitability Score: {result['exploitability_score']}")
    print(f"  Impact Score: {result['impact_score']}")
    
    print(f"\nMetric Details:")
    for metric_key, (value, description) in result['metrics'].items():
        metric_name = metric_key.replace('_', ' ').title()
        print(f"  {metric_name}: {value} ({description})")
    
    print("="*60)


def parse_arguments():
    """
    Parse command line arguments.
    
    Returns:
        argparse.Namespace: Parsed arguments
    """
    parser = argparse.ArgumentParser(
        description="Calculate CVSS v3.1 Base Score for vulnerability assessment",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Calculate score with all metrics specified
  python cvss_calculator.py --av N --ac L --pr N --ui N --s U --c H --i H --a H
  
  # Run in interactive mode
  python cvss_calculator.py --interactive
  
  # Show help
  python cvss_calculator.py --help

Metric Values:
  Attack Vector (--av):        N=Network, A=Adjacent, L=Local, P=Physical
  Attack Complexity (--ac):    L=Low, H=High
  Privileges Required (--pr):  N=None, L=Low, H=High
  User Interaction (--ui):     N=None, R=Required
  Scope (--s):                 U=Unchanged, C=Changed
  Confidentiality (--c):       N=None, L=Low, H=High
  Integrity (--i):             N=None, L=Low, H=High
  Availability (--a):          N=None, L=Low, H=High
        """
    )
    
    parser.add_argument('--interactive', '-i', action='store_true',
                       help='Run in interactive mode')
    
    parser.add_argument('--av', metavar='VALUE', choices=['N', 'A', 'L', 'P'],
                       help='Attack Vector: N=Network, A=Adjacent, L=Local, P=Physical')
    
    parser.add_argument('--ac', metavar='VALUE', choices=['L', 'H'],
                       help='Attack Complexity: L=Low, H=High')
    
    parser.add_argument('--pr', metavar='VALUE', choices=['N', 'L', 'H'],
                       help='Privileges Required: N=None, L=Low, H=High')
    
    parser.add_argument('--ui', metavar='VALUE', choices=['N', 'R'],
                       help='User Interaction: N=None, R=Required')
    
    parser.add_argument('--s', metavar='VALUE', choices=['U', 'C'],
                       help='Scope: U=Unchanged, C=Changed')
    
    parser.add_argument('--c', metavar='VALUE', choices=['N', 'L', 'H'],
                       help='Confidentiality Impact: N=None, L=Low, H=High')
    
    parser.add_argument('--i', metavar='VALUE', choices=['N', 'L', 'H'],
                       help='Integrity Impact: N=None, L=Low, H=High')
    
    parser.add_argument('--a', metavar='VALUE', choices=['N', 'L', 'H'],
                       help='Availability Impact: N=None, L=Low, H=High')
    
    parser.add_argument('--version', action='version', version='CVSS Calculator v1.0.0')
    
    return parser.parse_args()


def main():
    """
    Main function to run the CVSS calculator.
    """
    args = parse_arguments()
    
    # Check if running in interactive mode
    if args.interactive:
        interactive_mode()
        return
    
    # Check if all required arguments are provided for non-interactive mode
    required_args = ['av', 'ac', 'pr', 'ui', 's', 'c', 'i', 'a']
    provided_args = {arg: getattr(args, arg) for arg in required_args if getattr(args, arg) is not None}
    
    if len(provided_args) == 0:
        print("Error: No metrics provided. Use --interactive for interactive mode or provide all metrics.")
        print("Use --help for usage information.")
        sys.exit(1)
    
    if len(provided_args) != len(required_args):
        missing_args = [arg for arg in required_args if getattr(args, arg) is None]
        print(f"Error: Missing required arguments: {', '.join(['--' + arg for arg in missing_args])}")
        print("Use --help for usage information.")
        sys.exit(1)
    
    # Calculate CVSS score
    calculator = CVSSCalculator()
    
    try:
        result = calculator.calculate_cvss(
            av=args.av, ac=args.ac, pr=args.pr, ui=args.ui,
            s=args.s, c=args.c, i=args.i, a=args.a
        )
        display_results(result)
    except ValueError as e:
        print(f"Error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
