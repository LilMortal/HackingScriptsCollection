#!/usr/bin/env python3
"""
Payload EncoderDecoder - A versatile encoding and decoding utility

This script provides various encoding and decoding methods for data transformation,
useful for security research, reverse engineering, and data processing tasks.

Usage examples:
    python payload_encoder_decoder.py -e base64 -i "Hello World"
    python payload_encoder_decoder.py -d hex -i "48656c6c6f20576f726c64"
    python payload_encoder_decoder.py -e url -f input.txt -o output.txt
    python payload_encoder_decoder.py -d base64 -i "SGVsbG8gV29ybGQ=" --verbose

Author: Assistant
License: MIT
Version: 1.0.0
"""

import argparse
import base64
import binascii
import html
import json
import sys
import urllib.parse
import zlib
from pathlib import Path
from typing import Optional, Union


class PayloadEncoderDecoder:
    """
    A class that handles various encoding and decoding operations for payloads.
    
    Supported formats:
    - Base64
    - Hexadecimal
    - URL encoding
    - HTML entities
    - Unicode escape sequences
    - JSON strings
    - Zlib compression
    - ROT13 cipher
    - Binary representation
    """
    
    @staticmethod
    def base64_encode(data: str) -> str:
        """Encode string to Base64."""
        try:
            encoded_bytes = base64.b64encode(data.encode('utf-8'))
            return encoded_bytes.decode('ascii')
        except Exception as e:
            raise ValueError(f"Base64 encoding failed: {e}")
    
    @staticmethod
    def base64_decode(data: str) -> str:
        """Decode Base64 string."""
        try:
            # Remove whitespace and padding if necessary
            data = data.strip().replace(' ', '').replace('\n', '').replace('\r', '')
            decoded_bytes = base64.b64decode(data + '==')  # Add padding
            return decoded_bytes.decode('utf-8')
        except Exception as e:
            raise ValueError(f"Base64 decoding failed: {e}")
    
    @staticmethod
    def hex_encode(data: str) -> str:
        """Encode string to hexadecimal."""
        try:
            return data.encode('utf-8').hex()
        except Exception as e:
            raise ValueError(f"Hex encoding failed: {e}")
    
    @staticmethod
    def hex_decode(data: str) -> str:
        """Decode hexadecimal string."""
        try:
            # Remove spaces and common prefixes
            data = data.replace(' ', '').replace('0x', '').replace('\\x', '')
            decoded_bytes = bytes.fromhex(data)
            return decoded_bytes.decode('utf-8')
        except Exception as e:
            raise ValueError(f"Hex decoding failed: {e}")
    
    @staticmethod
    def url_encode(data: str) -> str:
        """URL encode string."""
        try:
            return urllib.parse.quote(data, safe='')
        except Exception as e:
            raise ValueError(f"URL encoding failed: {e}")
    
    @staticmethod
    def url_decode(data: str) -> str:
        """URL decode string."""
        try:
            return urllib.parse.unquote(data)
        except Exception as e:
            raise ValueError(f"URL decoding failed: {e}")
    
    @staticmethod
    def html_encode(data: str) -> str:
        """HTML entity encode string."""
        try:
            return html.escape(data, quote=True)
        except Exception as e:
            raise ValueError(f"HTML encoding failed: {e}")
    
    @staticmethod
    def html_decode(data: str) -> str:
        """HTML entity decode string."""
        try:
            return html.unescape(data)
        except Exception as e:
            raise ValueError(f"HTML decoding failed: {e}")
    
    @staticmethod
    def unicode_encode(data: str) -> str:
        """Encode string to Unicode escape sequences."""
        try:
            return data.encode('unicode_escape').decode('ascii')
        except Exception as e:
            raise ValueError(f"Unicode encoding failed: {e}")
    
    @staticmethod
    def unicode_decode(data: str) -> str:
        """Decode Unicode escape sequences."""
        try:
            return data.encode('ascii').decode('unicode_escape')
        except Exception as e:
            raise ValueError(f"Unicode decoding failed: {e}")
    
    @staticmethod
    def json_encode(data: str) -> str:
        """JSON string encode."""
        try:
            return json.dumps(data)
        except Exception as e:
            raise ValueError(f"JSON encoding failed: {e}")
    
    @staticmethod
    def json_decode(data: str) -> str:
        """JSON string decode."""
        try:
            return json.loads(data)
        except Exception as e:
            raise ValueError(f"JSON decoding failed: {e}")
    
    @staticmethod
    def zlib_encode(data: str) -> str:
        """Compress string using zlib and return base64 encoded result."""
        try:
            compressed = zlib.compress(data.encode('utf-8'))
            return base64.b64encode(compressed).decode('ascii')
        except Exception as e:
            raise ValueError(f"Zlib compression failed: {e}")
    
    @staticmethod
    def zlib_decode(data: str) -> str:
        """Decompress zlib compressed base64 string."""
        try:
            compressed_data = base64.b64decode(data)
            decompressed = zlib.decompress(compressed_data)
            return decompressed.decode('utf-8')
        except Exception as e:
            raise ValueError(f"Zlib decompression failed: {e}")
    
    @staticmethod
    def rot13_encode(data: str) -> str:
        """Apply ROT13 cipher."""
        try:
            return data.encode('rot13')
        except Exception as e:
            raise ValueError(f"ROT13 encoding failed: {e}")
    
    @staticmethod
    def rot13_decode(data: str) -> str:
        """Decode ROT13 cipher (ROT13 is its own inverse)."""
        try:
            return data.encode('rot13')
        except Exception as e:
            raise ValueError(f"ROT13 decoding failed: {e}")
    
    @staticmethod
    def binary_encode(data: str) -> str:
        """Encode string to binary representation."""
        try:
            return ' '.join(format(ord(char), '08b') for char in data)
        except Exception as e:
            raise ValueError(f"Binary encoding failed: {e}")
    
    @staticmethod
    def binary_decode(data: str) -> str:
        """Decode binary representation to string."""
        try:
            # Remove extra whitespace and split by spaces
            binary_values = data.strip().split()
            chars = [chr(int(binary, 2)) for binary in binary_values]
            return ''.join(chars)
        except Exception as e:
            raise ValueError(f"Binary decoding failed: {e}")


def read_input_data(input_source: Optional[str], input_file: Optional[str]) -> str:
    """
    Read input data from either command line argument or file.
    
    Args:
        input_source: Input string from command line
        input_file: Path to input file
        
    Returns:
        Input data as string
        
    Raises:
        ValueError: If no input source is provided or file cannot be read
    """
    if input_source:
        return input_source
    elif input_file:
        try:
            file_path = Path(input_file)
            if not file_path.exists():
                raise FileNotFoundError(f"Input file '{input_file}' not found")
            return file_path.read_text(encoding='utf-8')
        except Exception as e:
            raise ValueError(f"Error reading input file: {e}")
    else:
        raise ValueError("No input provided. Use -i for string input or -f for file input")


def write_output_data(data: str, output_file: Optional[str], verbose: bool = False) -> None:
    """
    Write output data to file or stdout.
    
    Args:
        data: Output data to write
        output_file: Optional output file path
        verbose: Whether to show verbose output
    """
    if output_file:
        try:
            file_path = Path(output_file)
            file_path.write_text(data, encoding='utf-8')
            if verbose:
                print(f"Output written to: {output_file}")
        except Exception as e:
            print(f"Error writing output file: {e}", file=sys.stderr)
            sys.exit(1)
    else:
        print(data)


def get_available_formats() -> dict:
    """Return dictionary of available encoding formats and their methods."""
    encoder_decoder = PayloadEncoderDecoder()
    return {
        'base64': (encoder_decoder.base64_encode, encoder_decoder.base64_decode),
        'hex': (encoder_decoder.hex_encode, encoder_decoder.hex_decode),
        'url': (encoder_decoder.url_encode, encoder_decoder.url_decode),
        'html': (encoder_decoder.html_encode, encoder_decoder.html_decode),
        'unicode': (encoder_decoder.unicode_encode, encoder_decoder.unicode_decode),
        'json': (encoder_decoder.json_encode, encoder_decoder.json_decode),
        'zlib': (encoder_decoder.zlib_encode, encoder_decoder.zlib_decode),
        'rot13': (encoder_decoder.rot13_encode, encoder_decoder.rot13_decode),
        'binary': (encoder_decoder.binary_encode, encoder_decoder.binary_decode),
    }


def main():
    """Main function to handle command line arguments and execute encoding/decoding."""
    parser = argparse.ArgumentParser(
        description="Payload EncoderDecoder - Versatile encoding and decoding utility",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python payload_encoder_decoder.py -e base64 -i "Hello World"
  python payload_encoder_decoder.py -d hex -i "48656c6c6f20576f726c64"
  python payload_encoder_decoder.py -e url -f input.txt -o output.txt
  python payload_encoder_decoder.py -d base64 -i "SGVsbG8gV29ybGQ=" --verbose

Supported formats:
  base64, hex, url, html, unicode, json, zlib, rot13, binary
        """
    )
    
    # Operation group (encode or decode)
    operation_group = parser.add_mutually_exclusive_group(required=True)
    operation_group.add_argument('-e', '--encode', metavar='FORMAT',
                                help='Encode using specified format')
    operation_group.add_argument('-d', '--decode', metavar='FORMAT',
                                help='Decode using specified format')
    
    # Input group (string or file)
    input_group = parser.add_mutually_exclusive_group(required=True)
    input_group.add_argument('-i', '--input', metavar='STRING',
                            help='Input string to encode/decode')
    input_group.add_argument('-f', '--file', metavar='FILE',
                            help='Input file to encode/decode')
    
    # Output options
    parser.add_argument('-o', '--output', metavar='FILE',
                       help='Output file (default: stdout)')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Enable verbose output')
    parser.add_argument('--list-formats', action='store_true',
                       help='List all available formats and exit')
    
    args = parser.parse_args()
    
    # List available formats if requested
    if args.list_formats:
        formats = get_available_formats()
        print("Available encoding/decoding formats:")
        for format_name in sorted(formats.keys()):
            print(f"  - {format_name}")
        sys.exit(0)
    
    # Get available formats and validate the requested format
    formats = get_available_formats()
    requested_format = args.encode or args.decode
    
    if requested_format not in formats:
        print(f"Error: Unsupported format '{requested_format}'", file=sys.stderr)
        print(f"Available formats: {', '.join(sorted(formats.keys()))}", file=sys.stderr)
        sys.exit(1)
    
    # Read input data
    try:
        input_data = read_input_data(args.input, args.file)
        if args.verbose:
            print(f"Input data length: {len(input_data)} characters")
            if args.file:
                print(f"Read from file: {args.file}")
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Perform encoding or decoding
    try:
        encoder_func, decoder_func = formats[requested_format]
        
        if args.encode:
            result = encoder_func(input_data)
            operation = "encoded"
        else:
            result = decoder_func(input_data)
            operation = "decoded"
        
        if args.verbose:
            print(f"Successfully {operation} using {requested_format} format")
            print(f"Output data length: {len(result)} characters")
            print("---")
        
        # Write output
        write_output_data(result, args.output, args.verbose)
        
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
